// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: players.sql

package db

import (
	"context"
)

const createPlayer = `-- name: CreatePlayer :one
INSERT INTO players (
  username, password
) VALUES (
  $1, $2
)
RETURNING id
`

type CreatePlayerParams struct {
	Username string      `json:"username"`
	Password interface{} `json:"password"`
}

func (q *Queries) CreatePlayer(ctx context.Context, arg CreatePlayerParams) (int64, error) {
	row := q.db.QueryRowContext(ctx, createPlayer, arg.Username, arg.Password)
	var id int64
	err := row.Scan(&id)
	return id, err
}

const deletePlayer = `-- name: DeletePlayer :exec
DELETE FROM players
WHERE id = $1
`

func (q *Queries) DeletePlayer(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deletePlayer, id)
	return err
}

const listPlayers = `-- name: ListPlayers :many
SELECT id, username, password, join_date FROM players
ORDER BY username
`

func (q *Queries) ListPlayers(ctx context.Context) ([]Player, error) {
	rows, err := q.db.QueryContext(ctx, listPlayers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Player{}
	for rows.Next() {
		var i Player
		if err := rows.Scan(
			&i.ID,
			&i.Username,
			&i.Password,
			&i.JoinDate,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updatePlayer = `-- name: UpdatePlayer :one
UPDATE players
  set password = $2
WHERE id = $1
RETURNING id
`

type UpdatePlayerParams struct {
	ID       int64       `json:"id"`
	Password interface{} `json:"password"`
}

func (q *Queries) UpdatePlayer(ctx context.Context, arg UpdatePlayerParams) (int64, error) {
	row := q.db.QueryRowContext(ctx, updatePlayer, arg.ID, arg.Password)
	var id int64
	err := row.Scan(&id)
	return id, err
}
