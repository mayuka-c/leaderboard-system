// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: games.sql

package db

import (
	"context"
	"time"
)

const createGame = `-- name: CreateGame :one
INSERT INTO games (
  name, created_at
) VALUES (
  $1, $2
)
RETURNING id
`

type CreateGameParams struct {
	Name      string    `json:"name"`
	CreatedAt time.Time `json:"created_at"`
}

func (q *Queries) CreateGame(ctx context.Context, arg CreateGameParams) (int64, error) {
	row := q.db.QueryRowContext(ctx, createGame, arg.Name, arg.CreatedAt)
	var id int64
	err := row.Scan(&id)
	return id, err
}

const deleteGame = `-- name: DeleteGame :exec
DELETE FROM games
WHERE id = $1
`

func (q *Queries) DeleteGame(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteGame, id)
	return err
}

const listGames = `-- name: ListGames :many
SELECT id, name, created_at FROM games
ORDER BY name
`

func (q *Queries) ListGames(ctx context.Context) ([]Game, error) {
	rows, err := q.db.QueryContext(ctx, listGames)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Game{}
	for rows.Next() {
		var i Game
		if err := rows.Scan(&i.ID, &i.Name, &i.CreatedAt); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
