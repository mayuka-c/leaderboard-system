// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0

package db

import (
	"database/sql"
	"database/sql/driver"
	"fmt"
	"time"
)

type GenderT string

const (
	GenderTMale   GenderT = "Male"
	GenderTFemale GenderT = "Female"
)

func (e *GenderT) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = GenderT(s)
	case string:
		*e = GenderT(s)
	default:
		return fmt.Errorf("unsupported scan type for GenderT: %T", src)
	}
	return nil
}

type NullGenderT struct {
	GenderT GenderT `json:"gender_t"`
	Valid   bool    `json:"valid"` // Valid is true if GenderT is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullGenderT) Scan(value interface{}) error {
	if value == nil {
		ns.GenderT, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.GenderT.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullGenderT) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.GenderT), nil
}

// Stores Games info
type Game struct {
	ID        int64     `json:"id"`
	Name      string    `json:"name"`
	CreatedAt time.Time `json:"created_at"`
}

// Stores Leaderboard info for all games
type Leaderboard struct {
	GameID    int64         `json:"game_id"`
	PlayerID  int64         `json:"player_id"`
	Score     sql.NullInt64 `json:"score"`
	UpdatedAt time.Time     `json:"updated_at"`
}

// Stores Players Login info
type Player struct {
	ID       int64       `json:"id"`
	Username string      `json:"username"`
	Password interface{} `json:"password"`
	JoinDate time.Time   `json:"join_date"`
}

// Stores Players Profile details
type Profile struct {
	ID        int64         `json:"id"`
	FirstName string        `json:"first_name"`
	LastName  string        `json:"last_name"`
	Email     string        `json:"email"`
	Age       int32         `json:"age"`
	Gender    GenderT       `json:"gender"`
	PlayerID  sql.NullInt64 `json:"player_id"`
	UpdatedAt time.Time     `json:"updated_at"`
}
